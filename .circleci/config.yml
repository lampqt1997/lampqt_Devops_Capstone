version: 2.1
orbs:
  docker: circleci/docker@2.2.0

jobs:
  create-cluster:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Install
          command: |
            # Install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # Install eksctl
            sudo curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
            
            # Install kubectl
            curl --silent --location "https://dl.k8s.io/release/$(curl --silent --location https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" --output kubectl
            sudo install kubectl /usr/local/bin/
            
            # Verify installations
            aws --version
            eksctl version
            kubectl version --client
      - run:
          name: Create EKS cluster
          command: |
            # Set the name of the cluster
            CLUSTER_NAME="lampqt-cluster"
            
            # Check if the cluster already exists
            if aws eks describe-cluster --name "$CLUSTER_NAME" >/dev/null 2>&1; then
              echo "The EKS cluster '$CLUSTER_NAME' already exists."
            else
              # Create the EKS cluster
              eksctl create cluster -f eks/cluster.yaml
              kubectl get nodes
              aws s3 cp ~/.kube/config s3://lampqt-kube/kubeconfig            
            fi
 

  build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ app-build ]
      - run:
          name: Build app
          command: |
            cd app
            npm install
      - save_cache:
          paths: [ app/node_modules ]
          key: app-build
  lint:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ app-lint ]
      - run:
          name: Lint app
          command: |
            cd app
            npm install
            npm run lint
      - save_cache:
          paths: [ app/node_modules ]
          key: app-lint
  build_docker:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.7
      - run:
          name: Install AWS CLI
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
            sudo apt-get update
            sudo apt-get install -y curl
            
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - run:
          name: Build and Push Docker Image to ECR
          command: |
            cd app
            
            # Build the Docker image and run local
            docker build -t lampqt .
          
            # Tag the Docker image with ECR repository URI
            ECR_REPOSITORY="609874051346.dkr.ecr.us-east-1.amazonaws.com/lampqt:latest"
            docker tag lampqt:latest $ECR_REPOSITORY
            
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 609874051346.dkr.ecr.us-east-1.amazonaws.com
            docker push $ECR_REPOSITORY         

  deploy:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Install environment
          command: |
            # Install AWS CLI
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

            # Install kubectl
            curl --silent --location "https://dl.k8s.io/release/$(curl --silent --location https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" --output kubectl
            sudo install kubectl /usr/local/bin/
            
            sudo apt-get update
            sudo apt-get install -y curl

      - run:
          name: Get config
          command: |
            aws s3 cp s3://lampqt-kube/kubeconfig ~/.kube/config
            export KUBECONFIG=$KUBECONFIG:~/.kube/config
            kubectl get nodes
      - run:
          name: Deploy Docker Image to EKS Cluster
          command: |
            NS=$(kubectl get namespace lampqt-capstone | awk '{print $1}' | grep -v NAME)
            echo $NS
            if [ "$NS" = "lampqt-capstone" ]
            then
              echo "Namespace exists"
            else
              echo "Creating Namespace"
              kubectl create namespace lampqt-capstone
            fi
            kubectl config set-context --current --namespace=lampqt-capstone
            kubectl apply -f app/deployment.yaml -n lampqt-capstone
            LB_URL=$(kubectl get services -n lampqt-capstone lampqt-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            echo "Load Balancer URL: $LB_URL"
            echo "$LB_URL" > app/url.txt
            cat app/url.txt
            aws s3 cp app/url.txt s3://lampqt-kube/url.txt
            kubectl get deployments -n lampqt-capstone

            # redeploy if docker-image was changed
            kubectl -n lampqt-capstone set image deployment/lampqt-deployment lampqt=609874051346.dkr.ecr.us-east-1.amazonaws.com/lampqt:latest
            
            kubectl -n lampqt-capstone rollout status deployment lampqt-deployment

      - run:
          name: smock test
          command: |
            pwd
            ls -la
            LB_URL=$(cat app/url.txt)        
            echo "$LB_URL"
            curl $LB_URL
            echo ""
            status_code=$(curl -s -o /dev/null -w "%{http_code}" $LB_URL)
            if [[ $status_code =~ ^2[0-9]{2}$ ]]; then
              echo "Curl succeeded. Return value: 0"
              exit 0
            else
              echo "Curl failed. Return value: 1"
              exit 1
            fi
            
            



workflows:
  default:
    jobs:
      - create-cluster
      - build
      - lint:
          requires: [build]
      - build_docker:
          requires: [lint, create-cluster]
      - deploy:
          requires: [build_docker]
